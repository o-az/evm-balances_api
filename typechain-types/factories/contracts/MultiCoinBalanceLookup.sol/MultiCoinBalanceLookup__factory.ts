/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultiCoinBalanceLookup,
  MultiCoinBalanceLookupInterface,
} from "../../../contracts/MultiCoinBalanceLookup.sol/MultiCoinBalanceLookup";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610564806100206000396000f3fe6080604052600436106100225760003560e01c80636a385ae9146100d857610082565b366100825760405162461bcd60e51b815260206004820152602560248201527f4d756c7469436f696e42616c616e63654c6f6f6b7570206973206e6f742070616044820152647961626c6560d81b60648201526084015b60405180910390fd5b60405162461bcd60e51b815260206004820152602560248201527f4d756c7469436f696e42616c616e63654c6f6f6b7570206973206e6f742070616044820152647961626c6560d81b6064820152608401610079565b3480156100e457600080fd5b506100f86100f33660046103c2565b61010e565b6040516101059190610448565b60405180910390f35b606060008267ffffffffffffffff81111561012b5761012b61048c565b604051908082528060200260200182016040528015610154578160200160208202803683370190505b50905060005b838110156102d457610192858583818110610177576101776104a2565b905060200201602081019061018c91906104b8565b876102dd565b61019b576102c2565b60008585838181106101af576101af6104a2565b90506020020160208101906101c491906104b8565b6001600160a01b0316141561020157856001600160a01b0316318282815181106101f0576101f06104a2565b6020026020010181815250506102c2565b848482818110610213576102136104a2565b905060200201602081019061022891906104b8565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a082319060240160206040518083038186803b15801561026b57600080fd5b505afa15801561027f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a391906104da565b8282815181106102b5576102b56104a2565b6020026020010181815250505b806102cc816104f3565b91505061015a565b50949350505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166370a0823160e01b179052915160009283929086169161034a919061051c565b600060405180830381855afa9150503d8060008114610385576040519150601f19603f3d011682016040523d82523d6000602084013e61038a565b606091505b5090915050833b801580159061039d5750815b95945050505050565b80356001600160a01b03811681146103bd57600080fd5b919050565b6000806000604084860312156103d757600080fd5b6103e0846103a6565b9250602084013567ffffffffffffffff808211156103fd57600080fd5b818601915086601f83011261041157600080fd5b81358181111561042057600080fd5b8760208260051b850101111561043557600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561048057835183529284019291840191600101610464565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156104ca57600080fd5b6104d3826103a6565b9392505050565b6000602082840312156104ec57600080fd5b5051919050565b600060001982141561051557634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825160005b8181101561053d5760208186018101518583015201610523565b8181111561054c576000828501525b50919091019291505056fea164736f6c6343000809000a";

type MultiCoinBalanceLookupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiCoinBalanceLookupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiCoinBalanceLookup__factory extends ContractFactory {
  constructor(...args: MultiCoinBalanceLookupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultiCoinBalanceLookup> {
    return super.deploy(overrides || {}) as Promise<MultiCoinBalanceLookup>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiCoinBalanceLookup {
    return super.attach(address) as MultiCoinBalanceLookup;
  }
  override connect(signer: Signer): MultiCoinBalanceLookup__factory {
    return super.connect(signer) as MultiCoinBalanceLookup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiCoinBalanceLookupInterface {
    return new utils.Interface(_abi) as MultiCoinBalanceLookupInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiCoinBalanceLookup {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiCoinBalanceLookup;
  }
}
