/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultiCoinBalanceLookup,
  MultiCoinBalanceLookupInterface,
} from "../../contracts/MultiCoinBalanceLookup";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
        ],
        internalType: "struct MultiCoinBalanceLookup.Balance[]",
        name: "balances",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e85806100206000396000f3fe6080604052600436106100225760003560e01c80636a385ae91461009d57610062565b36610062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161005990610764565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009490610764565b60405180910390fd5b3480156100a957600080fd5b506100c460048036038101906100bf919061085b565b6100da565b6040516100d19190610ab5565b60405180910390f35b60608282905067ffffffffffffffff8111156100f9576100f8610ad7565b5b60405190808252806020026020018201604052801561013257816020015b61011f6106b6565b8152602001906001900390816101175790505b50905060005b838390508110156103b45761017384848381811061015957610158610b06565b5b905060200201602081019061016e9190610b35565b6103bc565b61017c576103a1565b600073ffffffffffffffffffffffffffffffffffffffff168484838181106101a7576101a6610b06565b5b90506020020160208101906101bc9190610b35565b73ffffffffffffffffffffffffffffffffffffffff16146102db576040518060800160405280610213878787868181106101f9576101f8610b06565b5b905060200201602081019061020e9190610b35565b6103cf565b815260200161024886868581811061022e5761022d610b06565b5b90506020020160208101906102439190610b35565b6104eb565b815260200161027d86868581811061026357610262610b06565b5b90506020020160208101906102789190610b35565b61053d565b81526020016102b286868581811061029857610297610b06565b5b90506020020160208101906102ad9190610b35565b61058f565b60ff168152508282815181106102cb576102ca610b06565b5b60200260200101819052506103a0565b60405180608001604052808673ffffffffffffffffffffffffffffffffffffffff163181526020016040518060400160405280600581526020017f457468657200000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f45544800000000000000000000000000000000000000000000000000000000008152508152602001601260ff1681525082828151811061039457610393610b06565b5b60200260200101819052505b5b80806103ac90610b91565b915050610138565b509392505050565b600080823b905060008111915050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b866040516024016104049190610be9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046e9190610c4b565b600060405180830381855afa9150503d80600081146104a9576040519150601f19603f3d011682016040523d82523d6000602084013e6104ae565b606091505b50915091508180156104c1575060208151145b6104cc5760006104e1565b808060200190518101906104e09190610c8e565b5b9250505092915050565b60606000806105016306fdde0360e01b856105d3565b915091508161051f5760405180602001604052806000815250610534565b808060200190518101906105339190610dad565b5b92505050919050565b60606000806105536395d89b4160e01b856105d3565b91509150816105715760405180602001604052806000815250610586565b808060200190518101906105859190610dad565b5b92505050919050565b60008060006105a563313ce56760e01b856105d3565b91509150816105b55760006105ca565b808060200190518101906105c99190610e22565b5b92505050919050565b600060608273ffffffffffffffffffffffffffffffffffffffff1684846040516024016106009190610be9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161066a9190610c4b565b600060405180830381855afa9150503d80600081146106a5576040519150601f19603f3d011682016040523d82523d6000602084013e6106aa565b606091505b50915091509250929050565b6040518060800160405280600081526020016060815260200160608152602001600060ff1681525090565b600082825260208201905092915050565b7f4d756c7469436f696e42616c616e63654c6f6f6b7570206973206e6f7420706160008201527f7961626c65000000000000000000000000000000000000000000000000000000602082015250565b600061074e6025836106e1565b9150610759826106f2565b604082019050919050565b6000602082019050818103600083015261077d81610741565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107c382610798565b9050919050565b6107d3816107b8565b81146107de57600080fd5b50565b6000813590506107f0816107ca565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261081b5761081a6107f6565b5b8235905067ffffffffffffffff811115610838576108376107fb565b5b60208301915083602082028301111561085457610853610800565b5b9250929050565b6000806000604084860312156108745761087361078e565b5b6000610882868287016107e1565b935050602084013567ffffffffffffffff8111156108a3576108a2610793565b5b6108af86828701610805565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6108fa816108e7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561093a57808201518184015260208101905061091f565b83811115610949576000848401525b50505050565b6000601f19601f8301169050919050565b600061096b82610900565b610975818561090b565b935061098581856020860161091c565b61098e8161094f565b840191505092915050565b600060ff82169050919050565b6109af81610999565b82525050565b60006080830160008301516109cd60008601826108f1565b50602083015184820360208601526109e58282610960565b915050604083015184820360408601526109ff8282610960565b9150506060830151610a1460608601826109a6565b508091505092915050565b6000610a2b83836109b5565b905092915050565b6000602082019050919050565b6000610a4b826108bb565b610a5581856108c6565b935083602082028501610a67856108d7565b8060005b85811015610aa35784840389528151610a848582610a1f565b9450610a8f83610a33565b925060208a01995050600181019050610a6b565b50829750879550505050505092915050565b60006020820190508181036000830152610acf8184610a40565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610b4b57610b4a61078e565b5b6000610b59848285016107e1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b9c826108e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610bcf57610bce610b62565b5b600182019050919050565b610be3816107b8565b82525050565b6000602082019050610bfe6000830184610bda565b92915050565b600081519050919050565b600081905092915050565b6000610c2582610c04565b610c2f8185610c0f565b9350610c3f81856020860161091c565b80840191505092915050565b6000610c578284610c1a565b915081905092915050565b610c6b816108e7565b8114610c7657600080fd5b50565b600081519050610c8881610c62565b92915050565b600060208284031215610ca457610ca361078e565b5b6000610cb284828501610c79565b91505092915050565b600080fd5b610cc98261094f565b810181811067ffffffffffffffff82111715610ce857610ce7610ad7565b5b80604052505050565b6000610cfb610784565b9050610d078282610cc0565b919050565b600067ffffffffffffffff821115610d2757610d26610ad7565b5b610d308261094f565b9050602081019050919050565b6000610d50610d4b84610d0c565b610cf1565b905082815260208101848484011115610d6c57610d6b610cbb565b5b610d7784828561091c565b509392505050565b600082601f830112610d9457610d936107f6565b5b8151610da4848260208601610d3d565b91505092915050565b600060208284031215610dc357610dc261078e565b5b600082015167ffffffffffffffff811115610de157610de0610793565b5b610ded84828501610d7f565b91505092915050565b610dff81610999565b8114610e0a57600080fd5b50565b600081519050610e1c81610df6565b92915050565b600060208284031215610e3857610e3761078e565b5b6000610e4684828501610e0d565b9150509291505056fea2646970667358221220309b71a3c97af4523443e895408a6538442d91034a77e65607a81baf6804217c64736f6c63430008090033";

type MultiCoinBalanceLookupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiCoinBalanceLookupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiCoinBalanceLookup__factory extends ContractFactory {
  constructor(...args: MultiCoinBalanceLookupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultiCoinBalanceLookup> {
    return super.deploy(overrides || {}) as Promise<MultiCoinBalanceLookup>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiCoinBalanceLookup {
    return super.attach(address) as MultiCoinBalanceLookup;
  }
  override connect(signer: Signer): MultiCoinBalanceLookup__factory {
    return super.connect(signer) as MultiCoinBalanceLookup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiCoinBalanceLookupInterface {
    return new utils.Interface(_abi) as MultiCoinBalanceLookupInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiCoinBalanceLookup {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiCoinBalanceLookup;
  }
}
