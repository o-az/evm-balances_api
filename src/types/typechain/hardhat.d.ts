/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "FakeTokenA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenA__factory>;
    getContractFactory(
      name: "FakeTokenB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenB__factory>;
    getContractFactory(
      name: "FakeTokenC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenC__factory>;
    getContractFactory(
      name: "FakeTokenD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenD__factory>;
    getContractFactory(
      name: "FakeTokenE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenE__factory>;
    getContractFactory(
      name: "FakeTokenF",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenF__factory>;
    getContractFactory(
      name: "FakeTokenG",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenG__factory>;
    getContractFactory(
      name: "FakeTokenH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenH__factory>;
    getContractFactory(
      name: "FakeTokenI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenI__factory>;
    getContractFactory(
      name: "FakeTokenJ",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenJ__factory>;
    getContractFactory(
      name: "FakeTokenK",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenK__factory>;
    getContractFactory(
      name: "FakeTokenL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenL__factory>;
    getContractFactory(
      name: "FakeTokenM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenM__factory>;
    getContractFactory(
      name: "FakeTokenN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenN__factory>;
    getContractFactory(
      name: "FakeTokenO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenO__factory>;
    getContractFactory(
      name: "FakeTokenP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenP__factory>;
    getContractFactory(
      name: "FakeTokenQ",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenQ__factory>;
    getContractFactory(
      name: "FakeTokenR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenR__factory>;
    getContractFactory(
      name: "FakeTokenS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenS__factory>;
    getContractFactory(
      name: "FakeTokenT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenT__factory>;
    getContractFactory(
      name: "FakeTokenXXXXXX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenXXXXXX__factory>;
    getContractFactory(
      name: "FakeTokenU",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenU__factory>;
    getContractFactory(
      name: "FakeTokenV",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenV__factory>;
    getContractFactory(
      name: "FakeTokenW",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenW__factory>;
    getContractFactory(
      name: "FakeTokenX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenX__factory>;
    getContractFactory(
      name: "FakeTokenY",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenY__factory>;
    getContractFactory(
      name: "FakeTokenZ",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeTokenZ__factory>;
    getContractFactory(
      name: "MultiCoinBalanceLookup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCoinBalanceLookup__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "FakeTokenA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenA>;
    getContractAt(
      name: "FakeTokenB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenB>;
    getContractAt(
      name: "FakeTokenC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenC>;
    getContractAt(
      name: "FakeTokenD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenD>;
    getContractAt(
      name: "FakeTokenE",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenE>;
    getContractAt(
      name: "FakeTokenF",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenF>;
    getContractAt(
      name: "FakeTokenG",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenG>;
    getContractAt(
      name: "FakeTokenH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenH>;
    getContractAt(
      name: "FakeTokenI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenI>;
    getContractAt(
      name: "FakeTokenJ",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenJ>;
    getContractAt(
      name: "FakeTokenK",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenK>;
    getContractAt(
      name: "FakeTokenL",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenL>;
    getContractAt(
      name: "FakeTokenM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenM>;
    getContractAt(
      name: "FakeTokenN",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenN>;
    getContractAt(
      name: "FakeTokenO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenO>;
    getContractAt(
      name: "FakeTokenP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenP>;
    getContractAt(
      name: "FakeTokenQ",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenQ>;
    getContractAt(
      name: "FakeTokenR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenR>;
    getContractAt(
      name: "FakeTokenS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenS>;
    getContractAt(
      name: "FakeTokenT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenT>;
    getContractAt(
      name: "FakeTokenXXXXXX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenXXXXXX>;
    getContractAt(
      name: "FakeTokenU",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenU>;
    getContractAt(
      name: "FakeTokenV",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenV>;
    getContractAt(
      name: "FakeTokenW",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenW>;
    getContractAt(
      name: "FakeTokenX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenX>;
    getContractAt(
      name: "FakeTokenY",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenY>;
    getContractAt(
      name: "FakeTokenZ",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeTokenZ>;
    getContractAt(
      name: "MultiCoinBalanceLookup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiCoinBalanceLookup>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
