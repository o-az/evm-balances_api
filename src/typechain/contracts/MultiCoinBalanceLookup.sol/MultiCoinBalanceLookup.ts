/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace MultiCoinBalanceLookup {
  export type BalanceStruct = {
    contractAddress: string;
    balance: BigNumberish;
    name: string;
    symbol: string;
    decimals: BigNumberish;
  };

  export type BalanceStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    contractAddress: string;
    balance: BigNumber;
    name: string;
    symbol: string;
    decimals: BigNumber;
  };
}

export interface MultiCoinBalanceLookupInterface extends utils.Interface {
  functions: {
    "getBalance(address,address)": FunctionFragment;
    "getBalances(address,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getBalance" | "getBalances"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [string, string[]]
  ): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MultiCoinBalanceLookup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiCoinBalanceLookupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [MultiCoinBalanceLookup.BalanceStructOutput] & {
        balance: MultiCoinBalanceLookup.BalanceStructOutput;
      }
    >;

    getBalances(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [MultiCoinBalanceLookup.BalanceStructOutput[]] & {
        balances: MultiCoinBalanceLookup.BalanceStructOutput[];
      }
    >;
  };

  getBalance(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<MultiCoinBalanceLookup.BalanceStructOutput>;

  getBalances(
    user: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<MultiCoinBalanceLookup.BalanceStructOutput[]>;

  callStatic: {
    getBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<MultiCoinBalanceLookup.BalanceStructOutput>;

    getBalances(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<MultiCoinBalanceLookup.BalanceStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalances(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
